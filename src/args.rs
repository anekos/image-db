
use clap::*;



pub fn build_cli() -> App<'static, 'static> {
    let check = Arg::with_name("check-extension")
        .help("Check file extension before load")
        .short("c")
        .long("check-extension");

    app_from_crate!()
        .arg(Arg::with_name("database-name")
             .help("Database name")
             .short("n")
             .long("name")
             .takes_value(true))
        .arg(Arg::with_name("database-path")
             .help("Path to *.sqlite")
             .short("p")
             .long("path")
             .takes_value(true))
        .subcommand(SubCommand::with_name("alias")
                    .alias("a")
                    .about("Define expression alias")
                    .arg(Arg::with_name("name")
                         .required(true))
                    .arg(Arg::with_name("expression")
                         .required(true)
                         .min_values(1)))
        .subcommand(SubCommand::with_name("completions")
                    .about("Generates completion scripts for your shell")
                    .arg(Arg::with_name("shell")
                         .required(true)
                         .possible_values(&["bash", "fish", "zsh"])
                         .help("The shell to generate the script for")))
        .subcommand(SubCommand::with_name("load")
                    .alias("l")
                    .about("Load directory or file")
                    .arg(Arg::with_name("path")
                         .required(true)
                         .min_values(1))
                    .arg(check.clone()))
        .subcommand(SubCommand::with_name("load-list")
                    .alias("l")
                    .about("Load from list file")
                    .arg(Arg::with_name("list-file")
                         .required(true)
                         .min_values(0))
                    .arg(check))
        .subcommand(SubCommand::with_name("select")
                    .alias("s")
                    .about("Select SQL")
                    .arg(Arg::with_name("where")
                         .required(true)
                         .min_values(1)))
        .subcommand(SubCommand::with_name("unalias")
                    .alias("s")
                    .about("Unalias")
                    .arg(Arg::with_name("name")
                         .required(true)))
}
